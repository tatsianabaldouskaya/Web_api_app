schedules:
  - cron: "0 8 * * *"
    displayName: "Daily Schedule"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dockerRegistry: 'your-registry.azurecr.io'
  dockerImageName: 'your-image-name'
  containerNameApi: 'your-api-container'
  containerNameUi: 'your-ui-container'

steps:
  - task: UseDotNet@2
    displayName: 'Install SDK'
    inputs:
      version: '8.x'

  - checkout: self

  - task: DotNetCoreCLI@2
    displayName: 'Restore Dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.sln'
  - task: DotNetCoreCLI@2
    displayName: 'Build the Project'
    inputs:
      command: 'build'
      projects: '**/*.csproj'

  - script: |
      podman build -t $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) .
    displayName: 'Build Docker Image using Podman'

  - script: |
      podman login $(dockerRegistry) --username $(dockerUsername) --password $(dockerPassword)
      podman push $(dockerRegistry)/$(dockerImageName):$(Build.BuildId)
    displayName: 'Push Docker Image to Registry'

  - script: |
      podman run -d --name $(containerNameApi) $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) dotnet $(pwd)/Api/Api.dll

      podman run -d --name $(containerNameUi) $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) dotnet $(pwd)/UI/UI.dll
    displayName: 'Run API and UI containers in background'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests'
    inputs:
      command: 'test'
      projects: '**/Tests.csproj'
      arguments: '--filter FullyQualifiedName~End2End --logger trx --results-directory $(Build.ArtifactStagingDirectory)/TestResults'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Test Results as Artifact'
    inputs:
      artifactName: 'TestResults'
      publishLocation: 'Container'
      targetPath: '$(Build.ArtifactStagingDirectory)/TestResults'

  - script: |
      podman stop $(containerNameApi) && podman rm $(containerNameApi)
      podman stop $(containerNameUi) && podman rm $(containerNameUi)
    displayName: 'Stop and Remove Containers'