trigger: none

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONAR_HOST_URL: 'https://sonarcloud.io'
  SONAR_PROJECT_KEY: 'tatsianabaldouskaya_Web_api_app'
  SONAR_ORG_KEY: 'tatsianabaldouskaya-1'
  COVERAGE_FOLDER: '$(System.DefaultWorkingDirectory)'
  COVERAGE_FILE: '$(COVERAGE_FOLDER)/coverage.cobertura.xml'

steps:
  - task: UseDotNet@2
    displayName: 'Install SDK'
    inputs:
      version: '8.x'

  - checkout: self
    fetchDepth: 0 

  - task: SonarCloudPrepare@3
    inputs:
      SonarQube: 'sonarToken1'
      organization: 'tatsianabaldouskaya-1'
      scannerMode: 'dotnet'
      projectKey: 'tatsianabaldouskaya_Web_api_app'
      extraProperties: |
        sonar.cs.xunit.reportsPaths=$(COVERAGE_FOLDER)/test-results.trx
        sonar.coverage.cobertura.reportPaths=$(COVERAGE_FILE)
        sonar.scanner.scanAll=false
        sonar.branch.name=main

  - task: DotNetCoreCLI@2
    displayName: 'Restore Dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.sln'

  - task: DotNetCoreCLI@2
    displayName: 'Build the Project'
    inputs:
      command: 'build'
      projects: '**/*.sln'

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests'
    inputs:
      command: 'test'
      projects: '**/Tests.csproj'
      arguments: '--filter FullyQualifiedName~Tests.UnitTests --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=$(System.DefaultWorkingDirectory)/TestResults/unittest-results.trx"'

  - task: PublishCodeCoverageResults@2
    displayName: 'Publish Code Coverage Results'
    inputs:
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.cobertura.xml'

  - task: SonarCloudAnalyze@3
  - task: SonarCloudPublish@3
    inputs:
      pollingTimeoutSec: '300'

  - task: DotNetCoreCLI@2
    displayName: 'Run Integration Tests'
    inputs:
      command: 'test'
      projects: '**/Tests.csproj'
      arguments: '--filter FullyQualifiedName~Tests.IntegrationTests --logger:"trx;LogFileName=$(System.DefaultWorkingDirectory)/TestResults/apitest-results.trx"'
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Test Results as Artifact'
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/TestResults'
      artifact: 'TestResults'
      publishLocation: 'pipeline'
